import twitchio
from twitchio.ext import commands

class SigilChatter(commands.Component):
    def __init__(self, database):
        self.setupquery = """CREATE TABLE IF NOT EXISTS sigils(id INTEGER PRIMARY KEY, sigil TEXT UNIQUE)"""
        self.database = database

    async def setupInserts(self):
        sigils = [
			'Α',
			'Β',
			'Γ',
			'Δ',
			'Ε',
			'Ζ',
			'Η',
			'Θ',
			'Ι',
			'Κ',
			'Λ',
			'Μ',
			'Ν',
			'Ξ',
			'Ο',
			'Π',
			'Ρ',
			'Σ',
			'Τ',
			'Υ',
			'Φ',
			'Χ',
			'Ψ',
			'Ω',
			'Ϊ',
			'Ϋ',
			'ά',
			'έ',
			'ή',
			'ί',
			'ΰ',
			'α',
			'β',
			'γ',
			'δ',
			'ε',
			'ζ',
			'η',
			'θ',
			'ι',
			'κ',
			'λ',
			'μ',
			'ν',
			'ξ',
			'ο',
			'π',
			'ρ',
			'ς',
			'σ',
			'τ',
			'υ',
			'φ',
			'χ',
			'ψ',
			'ω',
			'ϊ',
			'ϋ',
			'ό',
			'ύ',
			'ώ',
			'Ϙ',
			'ϙ',
			'Ϛ',
			'ϛ',
			'Ϝ',
			'ϝ',
			'Ϟ',
			'ϟ',
			'Ϡ',
			'ϡ',
			'ϴ',
			'ϵ',
			'Ё',
			'Ђ',
			'Ѓ',
			'Є',
			'Ѕ',
			'І',
			'Ї',
			'Ј',
			'Љ',
			'Њ',
			'Ћ',
			'Ќ',
			'Ў',
			'Џ',
			'А',
			'Б',
			'В',
			'Г',
			'Д',
			'Е',
			'Ж',
			'З',
			'И',
			'Й',
			'К',
			'Л',
			'М',
			'Н',
			'О',
			'П',
			'Р',
			'С',
			'Т',
			'У',
			'Ф',
			'Х',
			'Ц',
			'Ч',
			'Ш',
			'Щ',
			'Ъ',
			'Ы',
			'Ь',
			'Э',
			'Ю',
			'Я',
			'а',
			'б',
			'в',
			'г',
			'д',
			'е',
			'ж',
			'з',
			'и',
			'й',
			'к',
			'л',
			'м',
			'н',
			'о',
			'п',
			'р',
			'с',
			'т',
			'у',
			'ф',
			'х',
			'ц',
			'ч',
			'ш',
			'щ',
			'ъ',
			'ы',
			'ь',
			'э',
			'ю',
			'я',
			'ё',
			'ђ',
			'ѓ',
			'є',
			'ѕ',
			'і',
			'ї',
			'ј',
			'љ',
			'њ',
			'ћ',
			'ќ',
			'ў',
			'џ',
			'Ѣ',
			'ѣ',
			'Ѫ',
			'ѫ',
			'Ѳ',
			'ѳ',
			'Ѵ',
			'ѵ',
			'Ҁ',
			'ҁ',
			'Ґ',
			'ґ',
			'א',
			'ב',
			'ג',
			'ד',
			'ה',
			'ו',
			'ז',
			'ח',
			'ט',
			'י',
			'ך',
			'כ',
			'ל',
			'ם',
			'מ',
			'ן',
			'נ',
			'ס',
			'ע',
			'ף',
			'פ',
			'ץ',
			'צ',
			'ק',
			'ר',
			'ש',
			'ת',
			'،',
			'؛',
			'؟',
			'ء',
			'آ',
			'أ',
			'ؤ',
			'إ',
			'ئ',
			'ا',
			'ب',
			'ة',
			'ت',
			'ث',
			'ج',
			'ح',
			'خ',
			'د',
			'ذ',
			'ر',
			'ز',
			'س',
			'ش',
			'ص',
			'ض',
			'ط',
			'ظ',
			'ع',
			'غ',
			'ـ',
			'ف',
			'ق',
			'ك',
			'ل',
			'م',
			'ن',
			'ه',
			'و',
			'ى',
			'ي',
			'پ',
			'ڤ',
			'گ',
			'۰',
			'۱',
			'۲',
			'۳',
			'۴',
			'۵',
			'۶',
			'۷',
			'۸',
			'۹',
			'Ⅰ',
			'Ⅱ',
			'Ⅲ',
			'Ⅳ',
			'Ⅴ',
			'Ⅵ',
			'Ⅶ',
			'Ⅷ',
			'Ⅸ',
			'Ⅹ',
			'Ⅺ',
			'Ⅻ',
			'ⅰ',
			'ⅱ',
			'ⅲ',
			'ⅳ',
			'ⅴ',
			'ⅵ',
			'ⅶ',
			'ⅷ',
			'ⅸ',
			'ⅹ',
			'ⅺ',
			'ⅻ',
			'←',
			'↑',
			'→',
			'↓',
			'↔',
			'↕',
			'⇐',
			'⇒',
			'⇔',
			'∀',
			'∂',
			'∃',
			'∅',
			'∆',
			'∇',
			'∈',
			'∋',
			'∏',
			'∑',
			'−',
			'∓',
			'∗',
			'∘',
			'∙',
			'√',
			'∝',
			'∞',
			'∟',
			'∠',
			'∥',
			'∧',
			'∨',
			'∩',
			'∪',
			'∫',
			'∬',
			'∮',
			'∴',
			'∵',
			'∶',
			'∷',
			'∼',
			'∾',
			'≃',
			'≅',
			'≈',
			'≌',
			'≐',
			'≓',
			'≠',
			'≡',
			'≤',
			'≥',
			'≪',
			'≫',
			'≮',
			'≯',
			'⊂',
			'⊃',
			'⊆',
			'⊇',
			'⊙',
			'⊚',
			'⊥',
			'⋅',
			'⋮',
			'⋯',
			'⌂',
			'⌈',
			'⌉',
			'⌊',
			'⌋',
			'⌐',
			'⌒',
			'⌕',
			'⌠',
			'⌡',
			'〈',
			'〉',
			'␣',
			'⑀',
			'⑁',
			'⑂',
			'⑃',
			'⑆',
			'⑇',
			'⑈',
			'⑉',
			'▀',
			'▄',
			'█',
			'▌',
			'▐',
			'░',
			'▒',
			'▓',
			'■',
			'□',
			'▢',
			'▣',
			'▤',
			'▥',
			'▦',
			'▧',
			'▨',
			'▩',
			'▪',
			'▬',
			'▭',
			'▲',
			'△',
			'▶',
			'▷',
			'▼',
			'▽',
			'◀',
			'◁',
			'◆',
			'◇',
			'◊',
			'○',
			'◎',
			'●',
			'◐',
			'◑',
			'◘',
			'◙',
			'◢',
			'◣',
			'★',
			'☆',
			'☜',
			'☞',
			'☺',
			'☻',
			'☼',
			'♀',
			'♂',
			'♠',
			'♡',
			'♢',
			'♣',
			'♩',
			'♪',
			'♫',
			'♭',
			'♮',
			'♯',
			'✓',
			'✗',
			'✠',
			'、',
			'。',
			'〃',
			'々',
			'〆',
			'〇',
			'《',
			'》',
			'「',
			'」',
			'『',
			'』',
			'【',
			'】',
			'〒',
			'〓',
			'〔',
			'〕',
			'〖',
			'〗',
			'〜'
        ]
        query = "INSERT INTO sigils (sigil) VALUES (?) ON CONFLICT(sigil) DO NOTHING"
        async with self.database.acquire() as connection:
            for sigil in sigils:
                await connection.execute(query, (sigil))


    @commands.command(aliases=["glyph"])
    async def sigil(self, ctx: commands.Context) -> None:
        """Chats a random glyph

        !sigil, !glyph
        """
        q = "SELECT sigil FROM sigils ORDER BY RANDOM() LIMIT 1;"
        async with self.database.acquire() as connection:
            row: [sqlite3.Row] = await connection.fetchone(q)
        await ctx.send(f"{row[0]}")

